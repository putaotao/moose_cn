# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-12-25 15:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: =head1
#: Classes.pod:9
msgid "NAME"
msgstr "NAME"

#. type: textblock
#: Classes.pod:11
msgid "Moose::Manual::Classes - Making your classes use Moose (and subclassing)"
msgstr "Moose::Manual::Classes - 用 Moose 来构建类"

#. type: =head1
#: Classes.pod:13
msgid "VERSION"
msgstr "VERSION"

#. type: textblock
#: Classes.pod:15
msgid "version 2.0401"
msgstr "version 2.0401"

#. type: =head1
#: Classes.pod:17
msgid "USING MOOSE"
msgstr "使用 Moose"

#. type: textblock
#: Classes.pod:19
msgid "Using Moose is very simple, you just C<use Moose>:"
msgstr "用 Moose 来构建类是非常简单的，你只需要简单的 C<use Moose>:"

#. type: verbatim
#: Classes.pod:21 Classes.pod:34 Classes.pod:101 Classes.pod:111
#, no-wrap
msgid ""
"  package Person;\n"
"\n"
msgstr ""
"  package Person;\n"
"\n"

#. type: verbatim
#: Classes.pod:23 Classes.pod:36 Classes.pod:72 Classes.pod:105 Classes.pod:113
#, no-wrap
msgid ""
"  use Moose;\n"
"\n"
msgstr ""
"  use Moose;\n"
"\n"

#. type: textblock
#: Classes.pod:25
msgid "That's it, you've made a class with Moose!"
msgstr "通过 Moose 构造一个类就是这么简单。"

#. type: textblock
#: Classes.pod:27
msgid ""
"There's actually a lot going on here under the hood, so let's step through "
"it."
msgstr "整个过程在实验上还是很麻烦的，不过就让我们跳过它吧。"

#. type: textblock
#: Classes.pod:30
msgid ""
"When you load L<Moose>, a bunch of sugar functions are exported into your "
"class, such as C<extends>, C<has>, C<with>, and more. These functions are "
"what you use to define your class. For example, you might define an "
"attribute ..."
msgstr ""
"当你加载 L<Moose> 的时候，大量的 Moose 语法糖便引入到你定义的类中，比如"
"C<extends>，C<has>，C<with> 等等。这些语法糖可以方便的帮助你创建你的类。"
"比如，你可以这样定义一个属性 ..."

#. type: verbatim
#: Classes.pod:38 Classes.pod:115
#, no-wrap
msgid ""
"  has 'ssn' => ( is => 'rw' );\n"
"\n"
msgstr ""
"  has 'ssn' => ( is => 'rw' );\n"
"\n"

#. type: textblock
#: Classes.pod:40
msgid "Attributes are described in the L<Moose::Manual::Attributes> documentation."
msgstr ""
"在 L<Moose::Manual::Attributes> 中我们会详细的介绍类的属性如何在 Moose 中表示。"

#. type: textblock
#: Classes.pod:43
msgid ""
"Loading Moose also enables the C<strict> and C<warnings> pragmas in your "
"class."
msgstr ""
"另外，加载 Moose 也会打开 C<strict> 和 C<warnings> 信息。"

#. type: textblock
#: Classes.pod:46
msgid ""
"When you load Moose, your class will become a subclass of "
"L<Moose::Object>. The L<Moose::Object> class provides a default constructor "
"and destructor, as well as object construction helper methods. You can read "
"more about this in the L<Moose::Manual::Construction> document."
msgstr ""
"加载 Moose 之后你的类便成为 L<Moose::Object> 的子类。L<Moose::Object> 有默认的"
"构造函数、析构函数和一些辅助方法，具体的信息你可以在 L<Moose::Manual::Construction>"
"中找到。"

#. type: textblock
#: Classes.pod:52
msgid ""
"As a convenience, Moose creates a new class type for your class. See the "
"L<Moose::Manual::Types> document to learn more about types."
msgstr ""
"为了方便，Moose 根据你新定义的类，产生了一种新的变量类型。关于 Moose 类型这方面的"
"内容，你可以在 L<Moose::Manual::Types> 中找到。"

#. type: textblock
#: Classes.pod:55
msgid ""
"It also creates a L<Moose::Meta::Class> object for your class. This "
"metaclass object is now available by calling a C<meta> method on your class, "
"for example C<< Person->meta >>."
msgstr ""
"Moose 同样也会为你的类创建一个 L<Moose::Meta::Class> 。这个元类会在你的实例调用"
"C<meta> 方法时返回。具体示例请见 C<< Person->meta >>。"

#. type: textblock
#: Classes.pod:59
msgid ""
"The metaclass object provides an introspection API for your class. It is "
"also used by Moose itself under the hood to add attributes, define parent "
"classes, and so on. In fact, all of Moose's sugar does the real work by "
"calling methods on this metaclass object (and other meta API objects)."
msgstr ""
"产生元类为你提供了良好的自省 API 。它也被 Moose 用来实现一些功能，如添加一个"
"属性，声明父类等。事实上，所有 Moose 提供的语法糖都是基于对元类的操作来完成的。"

#. type: =head1
#: Classes.pod:65
msgid "SUBCLASSING"
msgstr "子类"

#. type: textblock
#: Classes.pod:67
msgid ""
"Moose provides a simple sugar function for declaring your parent classes, "
"C<extends>:"
msgstr ""
"Moose 提供一个简单的语法糖 C<extends> 来方便你声明当前类的父类。"

#. type: verbatim
#: Classes.pod:70
#, no-wrap
msgid ""
"  package User;\n"
"\n"
msgstr ""
"  package User;\n"
"\n"

#. type: verbatim
#: Classes.pod:74
#, no-wrap
msgid ""
"  extends 'Person';\n"
"\n"
msgstr ""
"  extends 'Person';\n"
"\n"

#. type: verbatim
#: Classes.pod:76
#, no-wrap
msgid ""
"  has 'username' => ( is => 'rw' );\n"
"\n"
msgstr ""
"  has 'username' => ( is => 'rw' );\n"
"\n"

#. type: textblock
#: Classes.pod:78
msgid ""
"Note that each call to C<extends> will I<reset> your parents. For multiple "
"inheritance you must provide all the parents at once, C<extends 'Foo', "
"'Bar'>."
msgstr ""
"需要注意的是，每次当你调用 C<extends> 时，Moose 会I<重置>其父类。当你需要"
"多继承的时候，请一次性的提供其要继承的父类，如 C<extends 'Foo', 'Bar'> 。"

#. type: textblock
#: Classes.pod:82
msgid ""
"You can use Moose to extend a non-Moose parent. However, when you do this, "
"you will inherit the parent class's constructor (assuming it is also called "
"C<new>). In that case, you will have to take care of initializing attributes "
"manually, either in the parent's constructor, or in your subclass, and you "
"will lose a lot of Moose magic."
msgstr ""
"你可以用 Moose 来继承一个非 Moose 类。当你这么做的时候，父类的构造函数会自动执行，"
"就像自动调用了 C<new> 似的。这种情况下，你将不得不自己考虑好各个属性的初始化。与此"
"许多 Moose 中非常神奇方便的方法你也不能使用了。"

#. type: textblock
#: Classes.pod:88
msgid ""
"See the L<MooseX::NonMoose> module on CPAN if you're interested in extending "
"non-Moose parent classes with Moose child classes."
msgstr ""
"如果你想要继承非 Moose 类，你可以去 CPAN 查看 L<MooseX::NonMoose> 来了解更多信息。"

#. type: =head1
#: Classes.pod:91
msgid "CLEANING UP MOOSE DROPPINGS"
msgstr "清理 Moose 带来的垃圾"

#. type: textblock
#: Classes.pod:93
msgid ""
"Moose exports a number of functions into your class. It's a good idea to "
"remove these sugar functions from your class's namespace, so that C<< "
"Person->can('has') >> will no longer return true."
msgstr ""
"当你使用 Moose 构建类的时候，Moose 会为你引入大量的语法糖函数。我们建议在"
"你的程序中移除这些多余的不必要的方法。"

#. type: textblock
#: Classes.pod:97
msgid ""
"There are several ways to do this. We recommend using "
"L<namespace::autoclean>, a CPAN module. Not only will it remove Moose "
"exports, it will also remove any other exports."
msgstr ""
"有很多方法来清理 Moose 带来的垃圾。我们推荐使用 L<namespace::autoclean>。"
"这个模块不仅会清理 Moose 带来的垃圾，也会清理其他来源的垃圾的。"

#. type: verbatim
#: Classes.pod:103
#, no-wrap
msgid ""
"  use namespace::autoclean;\n"
"\n"
msgstr ""
"  use namespace::autoclean;\n"
"\n"

#. type: textblock
#: Classes.pod:107
msgid ""
"If you absolutely can't use a CPAN module (but can use Moose?), you can "
"write C<no Moose> at the end of your class. This will remove any Moose "
"exports in your class."
msgstr ""
"如果你不想使用额外的模块的话，你可以在类的结尾处使用 C<no Moose> 。"

#. type: verbatim
#: Classes.pod:117
#, no-wrap
msgid ""
"  no Moose;\n"
"\n"
msgstr ""
"  no Moose;\n"
"\n"

#. type: =head1
#: Classes.pod:119
msgid "MAKING IT FASTER"
msgstr "更快些"

#. type: textblock
#: Classes.pod:121
msgid ""
"Moose has a feature called \"immutabilization\" that you can use to greatly "
"speed up your classes at runtime. However, using it incurs a cost when your "
"class is first being loaded. When you make your class immutable you tell "
"Moose that you will not be changing it in the future. You will not be adding "
"any more attributes, methods, roles, etc."
msgstr ""
"Moose 有一个功能叫做 \"immutabilization\"，这个功能可以使你的类在运行的时候更"
"快。当你把一个类 immutable，也就是告诉 Moose 你今后将不再改变这个类。"

#. type: textblock
#: Classes.pod:127
msgid ""
"This allows Moose to generate code specific to your class. In particular, it "
"creates an \"inline\" constructor, making object construction much faster."
msgstr ""
"这样的话，Moose 会为你生成一段特殊的代码，比如\"inline\" constructor。"

#. type: textblock
#: Classes.pod:131
msgid ""
"To make your class immutable you simply call C<make_immutable> on your "
"class's metaclass object."
msgstr ""
"要使类 immutable，你只需要通过元类来调用 C<make_immutable> 方法。"

#. type: verbatim
#: Classes.pod:134
#, no-wrap
msgid ""
"  __PACKAGE__->meta->make_immutable;\n"
"\n"
msgstr ""
"  __PACKAGE__->meta->make_immutable;\n"
"\n"

#. type: =head2
#: Classes.pod:136
msgid "Immutabilization and C<new()>"
msgstr "Immutabilization 和 C<new()>"

#. type: textblock
#: Classes.pod:138
msgid ""
"If you override C<new()> in your class, then the immutabilization code will "
"not be able to provide an optimized constructor for your class. Instead, you "
"should use a C<BUILD()> method, which will be called from the inlined "
"constructor."
msgstr ""
"如果你重载了 C<new()> 方法，那么 immutabilization 将不能加速你的代码。你应该通过"
"C<BUILD()> 方法来实现重载的部分，因为 C<BUILD()> 方法是在inline constructor之后"
"调用的。"

#. type: textblock
#: Classes.pod:143
msgid ""
"Alternately, if you really need to provide a different C<new()>, you can "
"also provide your own immutabilization method. Doing so requires extending "
"the Moose metaclasses, and is well beyond the scope of this manual."
msgstr ""
"如果你非要自己提供一个不同的 C<new()> 方法的话，你必须自己提供一个 immutabilization"
"的方法，而且需要继承 Moose 的元类，当然，这些内容已经超出本手册的范围了。"

#. type: =head1
#: Classes.pod:148
msgid "AUTHOR"
msgstr "作者"

#. type: textblock
#: Classes.pod:150
msgid ""
"Moose is maintained by the Moose Cabal, along with the help of many "
"contributors. See L<Moose/CABAL> and L<Moose/CONTRIBUTORS> for details."
msgstr ""
"Moose 是由许多志愿者共同努力的结果。具体的请参看 L<Moose/CABAL> 和"
"L<Moose/CONTRIBUTORS>"
"译者：xiaomo(wxm4ever@gmail.com)"

#. type: =head1
#: Classes.pod:152
msgid "COPYRIGHT AND LICENSE"
msgstr "版权和许可"

#. type: textblock
#: Classes.pod:154
msgid "This software is copyright (c) 2011 by Infinity Interactive, Inc.."
msgstr "This software is copyright (c) 2011 by Infinity Interactive, Inc.."

#. type: textblock
#: Classes.pod:156
msgid ""
"This is free software; you can redistribute it and/or modify it under the "
"same terms as the Perl 5 programming language system itself."
msgstr ""
"这是自由软件，您可以重新分配或者根据 Perl 5 的编程语言系统本身相关的条款进行"
"修改。"
